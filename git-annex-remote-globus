#!/usr/bin/env python
# git-annex external special remote program for Globus data repository
# 
# This is an addition to git-annex's built-in directory special remotes.
# 
# Install in PATH as git-annex-remote-directory
#
# TODO: Add Copyright

import sys, os, errno
import wget
import getopt
from lookup_url import lookup_url
import globus_sdk
import json
from globusclient import GlobusClient
from annexremote import Master
from annexremote import ExportRemote
from annexremote import SpecialRemote
from annexremote import RemoteError, ProtocolError

import json
import time
import sys
import webbrowser
import logging

from utils import enable_requests_logging, is_remote_session

from globus_sdk import (NativeAppAuthClient, TransferClient,
                        RefreshTokenAuthorizer)
from globus_sdk.exc import GlobusAPIError

versions = None
# FIXME: REMOVE PRINTS -debug messages !!!special remote see
# FIXME: put all local support modules in a different package

class GlobusRemote(SpecialRemote):

    """This is the class of Globus remotes."""

    CLIENT_ID = '01589ab6-70d1-4e1c-b33d-14b6af4a16be'

    TOKEN_FILE = 'refresh-tokens.json'

    REDIRECT_URI = 'https://auth.globus.org/v2/web/auth-code'

    SCOPES = ('openid email profile '
              'urn:globus:auth:scope:transfer.api.globus.org:all')

    get_input = getattr(__builtins__, 'raw_input', input)

    def __init__(self, annex):
        super(GlobusRemote, self).__init__(annex)
        self.server = None
        self.uuid = None
        self.fileprefix = None
        # TODO: make this into a property
        self.transfer_client = None

    @staticmethod
    def load_tokens_from_file(filepath):
        """Load a set of saved tokens."""
        with open(filepath, 'r') as f:
            tokens = json.load(f)

        return tokens

    @staticmethod
    def save_tokens_to_file(filepath, tokens):
        """Save a set of tokens for later use."""
        with open(filepath, 'w') as f:
            json.dump(tokens, f)

    def update_tokens_file_on_refresh(self, token_response):
        """
        Callback function passed into the RefreshTokenAuthorizer
        Will be invoked any time a new access token is fetched.
        """
        self.save_tokens_to_file(self.TOKEN_FILE, token_response.by_resource_server)

    def do_native_app_authentication(self, client_id, redirect_uri, requested_scopes=None):
        """
        Does a Native App authentication flow and returns a dict of tokens keyed by service name.
        """
        client = globus_sdk.NativeAppAuthClient(client_id=client_id)
        # pass refresh_tokens=True to request refresh tokens
        client.oauth2_start_flow(requested_scopes=requested_scopes,
                                 redirect_uri=redirect_uri,
                                 refresh_tokens=True)

        url = client.oauth2_get_authorize_url()

        # TODO: remove prints out
        print('Native App Authorization URL: \n{}'.format(url))

        if not is_remote_session():
            webbrowser.open(url, new=1)

        auth_code = self.get_input('Enter the auth code: ').strip()

        token_response = client.oauth2_exchange_code_for_tokens(auth_code)

        # return a set of tokens, organized by resource server name
        return token_response.by_resource_server

    def setup(self):
        """
        Load credentials, obtain or refresh tokens if they are not in token files
        """
        tokens = None
        try:
            # if we already have tokens, load and use them
            tokens = self.load_tokens_from_file(self.TOKEN_FILE)
        except Exception as e:
            self.annex.error('Exception while loading file: ', e)
        if not tokens:
            # if we need to get tokens, start the Native App authentication process
            tokens = self.do_native_app_authentication(self.CLIENT_ID, self.REDIRECT_URI, self.SCOPES)

            try:
                self.save_tokens_to_file(self.TOKEN_FILE, tokens)
            except Exception as e:
                self.annex.error('Exception while saving tokens to file: ', e)
                sys.exit()
        self.authenticate(tokens)

    def authenticate(self, tokens=None):
        """
        Manages authentication to Globus and returns transfer client to enable operations on dataset
        """
        # get tokens from tokens files
        if not tokens:
            tokens = self.load_tokens_from_file(self.TOKEN_FILE)

        transfer_tokens = tokens['transfer.api.globus.org']

        auth_client = NativeAppAuthClient(client_id=self.CLIENT_ID)

        authorizer = RefreshTokenAuthorizer(
            transfer_tokens['refresh_token'],
            auth_client,
            access_token=transfer_tokens['access_token'],
            expires_at=transfer_tokens['expires_at_seconds'],
            on_refresh=self.update_tokens_file_on_refresh)

        # TODO: bind it to object or maybe make it a PROPERTY
        self.transfer_client = TransferClient(authorizer=authorizer)

    def get_endpoint_id(self, dir_name):

        if not self.transfer_client:
            self.authenticate()

        endpoints_list = []
        for ep in self.transfer_client.endpoint_search(filter_fulltext=dir_name, num_results=None):
            print(ep['id'])
            endpoints_list.append(ep['id'])
        count = len(endpoints_list)

        if count == 1:
            # there is a unique id associated with the endpoint name
            return endpoints_list
        elif count > 1:
            print('{0} has ID {1}')
            self.annex.error('The endpoint {0} is not unique: {1} were found'.format(dir_name, count))
            # crash
            sys.exit()
        else:
            self.annex.error('The endpoint {0} does not exist'.format(dir_name))
            # crash
            sys.exit()

    def set_endpoint_server(self, endpoint_id):

        if not self.transfer_client:
            self.authenticate()
        # print out endpoint details
        try:
            obj = self.transfer_client.get_endpoint(endpoint_id)
            self.server = obj['https_server']
        except GlobusAPIError as ex:
            print(ex)
            if ex.http_status == 401:
                sys.exit('Refresh token has expired. '
                         'Please delete refresh-tokens.json and try again.')
            else:
                raise ex


        # TODO: trigger for debugging
        # revoke the access token that was just used to make requests against
        # the Transfer API to demonstrate that the RefreshTokenAuthorizer will
        # automatically get a new one

        # auth_client.oauth2_revoke_token(authorizer.access_token)
        # # Allow a little bit of time for the token revocation to settle
        # time.sleep(1)
        # # Verify that the access token is no longer valid
        # token_status = auth_client.oauth2_validate_token(
        #     transfer_tokens['access_token'])
        # assert token_status['active'] is False, 'Token was expected to be invalid.'
        # frdr_endpoint = None
        # print('\nDoing a second operations with a new access token:')
        # frdr_endpoint = transfer.endpoint_search(filter_fulltext='FRDR-Prod-2', num_results=None)
        # assert frdr_endpoint is None

    def initremote(self):

        """Requests the remote to initialize itself. Idempotent call"""

        print("Globus Special Remote is initializing..")
        # self._send_version()
        # get tokens if you do not have
        self.setup()

        # if the uuid is not specified by init/enable remote, query annex for uuid
        # same for path (subdirectories) and directory where data are stored
        self.uuid = self.annex.getconfig('uuid')
        # if path is empty assume files and their various subdirectories will be listed under endpoint directory
        # LOOK AT S3
        self.fileprefix = self.annex.getconfig('fileprefix')
        dir_name = self.annex.getconfig('name')
        dir_name = 'FRDR_Prod_2'
        if not self.uuid and not dir_name:
            raise RemoteError("Either directory name or uuid must be given.")

        if not self.uuid and dir_name:
            self.uuid = self.get_endpoint_id(dir_name)

    def prepare(self):
        """Connection takes place between Globus and git-annex"""
        print("I am in prepare - here the connection takes place")
        # self._send_version()
        # get tokens if you do not have
        self.setup()

        # if the uuid is not specified by init/enable remote, query annex for uuid
        # same for path (subdirectories) and directory where data are stored
        self.uuid = self.annex.getconfig('uuid')
        # if path is empty assume files and their various subdirectories will be listed under endpoint directory
        self.path = self.annex.getconfig('directory')
        dir_name = self.annex.getconfig('name')

        if not self.uuid and not dir_name:
            raise RemoteError("Either directory name or uuid must be given.")

        if not self.uuid and dir_name:
            self.uuid = self.get_endpoint_id(dir_name)

        self.set_endpoint_server(self.uuid)

        # if not self.directory:
        #     # we may assume it is your current directory
        #     print("j")
        
    def transfer_store(self, key, filename):
        # TODO: decide what to do with this RIA
        print("File cannot be stored in dataset")
        # location = self._calclocation(key)
        # self._do_store(key, filename, location)
        pass

    def transfer_retrieve(self, key, filename):
        """Manages retrieving files operation from Globus"""
        # self.authenticate()
        # look up key in lookup url to get the location
        location = self._calclocation(key)
        print('This is ', location)
        return self._do_retrieve(location, filename)

    def checkpresent(self, key):
        print('I am in checkpresent')
        """Manages checking for presence of file by its key in the given Globus location"""
        location = self._calclocation(key)
        print("LOCATION: ", location)
        return self._do_checkpresent(key, location)

    def remove(self, key):
        print("File cannot be removed in dataset")
        # location = self._calclocation(key)
        # self._do_remove(key, location)
        pass

    def _calclocation(self, key):
        print(key)
        # return '/'.join((self.directory, filename=hashkey))
        # which is the same as:
        return self.server + lookup_url[key]

    def get_key(self, path):
        # path takes to a symlink which get decoded e.g. path/to/file.txt -> something--key.txt
        # presence of 'key' is checked in globus
        # if present, the key gets returned
        link = os.readlink(path).split('--')[-1]
        key = link.split(".")[0]
        # check presence
        print(key)
        return key

    # TODO: decorate it to return multiple files in multiple locations
    def _do_retrieve(self, location, filename):
        print("I AM IN RETRIEVE")
        # build path with file to be retrieved
        # ADD: check that the key and file are correct,  can use REGEX as the filename may be a path/filename
        path = os.path.join(location, filename)
        try:
            print('Trying download..')
            wget.download(url=location)
        except OSError as e:
            raise RemoteError(e)

    def _do_checkpresent(self, key, location):
        """Checks presence of file by its key in the given Globus location"""
        if lookup_url[key]:
            print('file present in Globus')
            return True
        return False
        # if not os.path.exists(self.directory):
        #    raise RemoteError("this remote is not currently available")
        # return os.path.isfile(location)

    # Export methods
    # def transferexport_store(self, key, local_file, remote_file):
    #     location = '/'.join((self.directory, remote_file))
    #     self._do_store(key, local_file, location)
    #
    # def transferexport_retrieve(self, key, local_file, remote_file):
    #     location = '/'.join((self.directory, remote_file))
    #     self._do_retrieve(key, location, local_file)
    #
    # def checkpresentexport(self, key, remote_file):
    #     location = '/'.join((self.directory, remote_file))
    #     return self._do_checkpresent(key, location)
    #
    # def removeexport(self, key, remote_file):
    #     location = '/'.join((self.directory, remote_file))
    #     self._do_remove(key, location)
    #
    # def removeexportdirectory(self, remote_directory):
    #     location = '/'.join((self.directory, remote_directory))
    #     try:
    #         os.rmdir(location)
    #     except OSError as e:
    #         if e.errno != errno.ENOENT:
    #             raise RemoteError(e)
    #
    # def renameexport(self, key, filename, new_filename):
    #     oldlocation = '/'.join((self.directory, filename))
    #     newlocation = '/'.join((self.directory, new_filename))
    #     try:
    #         os.rename(oldlocation, newlocation)
    #     except OSError as e:
    #         raise RemoteError(e)
    #
    # def _mkdir(self, directory):
    #     try:PREPARE
    #         os.makedirs(directory)
    #     except OSError as e:
    #         if e.errno != errno.EEXIST:
    #             raise RemoteError("Failed to write to {}".format(directory))
    #
    # def _calclocation(self, key):
    #     return "{dir}/{hash}{key}".format(
    #                     dir=self.directory,
    #                     hash=self.annex.dirhash(key),
    #                     key=key)
    #
    # def _info(self, message):
    #     try:
    #         self.annex.info(message)
    #     except ProtocolError:
    #         print(message)
    #
    # def _do_store(self, key, filename, location):
    #     self._mkdir(os.path.dirname(location))
    #     templocation = '/'.join((self.directory,
    #                             'tmp',
    #                             key))
    #     self._mkdir(os.path.dirname(templocation))
    #     try:
    #         copyfile(filename, templocation)
    #         os.rename(templocation, location)
    #     except OSError as e:
    #         raise RemoteError(e)
    #     try:
    #         os.rmdir(os.path.dirname(templocation))
    #     except OSError:
    #         self._info("Could not remove tempdir (Not empty)")
    #
    # def _do_retrieve(self, key, location, filename):rt
    #     try:
    #         copyfile(location, filename)
    #     except OSError as e:
    #         raise RemoteError(e)
    #
    # def _do_checkpresent(self, key, location):
    #     if not os.path.exists(self.directory):
    #         raise RemoteError("this remote is not currently available")
    #     return os.path.isfile(location)
    #
    # def _do_remove(self, key, location):
    #     if not os.path.exists(self.directory):
    #         raise RemoteError("this remote is not currently available")
    #     try:
    #         os.remove(location)
    #     except OSError as e:
    #         # It's not a failure to remove a file that is not present.
    #         if e.errno != errno.ENOENT:
    #             raise RemoteError(e)


def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == 'setup':
            print(sys.argv)
            with open(os.devnull, 'w') as devnull:
                master = Master(devnull)
                remote = GlobusRemote(master)
                remote.setup()
            return 0
        if sys.argv[1] == 'get':
            with open(os.devnull, 'w') as devnull:
                master = Master(devnull)
                remote = GlobusRemote(master)
                path = sys.argv[2]
                try:
                    key = remote.get_key(path)
                    # remote.checkpresent(key)
                    filename = path.split('/')[-1]
                    print(filename)
                    remote.transfer_retrieve(key, filename)
                except Exception as e:
                    print(e)
            return 0
    else:
        # print(sys.argv)
        output = sys.stdout
        sys.stdout = sys.stderr
        # opts, args = getopt.getopt(sys.argv[0:], "d", ["dataset"])
        # print(opts, args)
        master = Master(output)
        remote = GlobusRemote(master)
        master.LinkRemote(remote)
        master.Listen()


if __name__ == "__main__":
    main()        
