#!/usr/bin/env python
import logging
import sys
import argparse
import os
import subprocess
from pathlib import Path
import configparser

class Retrieve:

    def __init__(self, dataset_path, dataset_name, remote_prefix, encryption):
        self.dataset_path = dataset_path
        self.remote_prefix = remote_prefix
        self.dataset_name = dataset_name
        self.url_prefix = 'globus://'
        self.annex_uuid = None
        self.encryption = encryption

    @property
    def remote_path(self):
        return self.url_prefix + self.dataset_name + self.remote_prefix

    def get_remote_path(self):
        return self.remote_path

    @property
    def remote(self):
        # check if remote was previously initialized
        setup_command = ['git', 'remote', '-v']
        process = subprocess.Popen(setup_command, stdout=subprocess.PIPE)
        output, _ = process.communicate()
        # split output to check if one remote is globus
        output = str(output).split("'")[1].split("\\t\\n")
        for remote in output:
            if remote == 'globus':
                return True
        return False

    def initialize(self):
        try:
            setup_e = self._set_up()
            if setup_e is not None:
                print('An error occurred during setup' + str(setup_e))
        except Exception as ex:
            print('The following exceptions was raised during setup: ' + str(ex))
            sys.exit()
        try:
            init_e = self._init_remote()
            if init_e is not None:
                print('An error occurred during initialization' + str(init_e))
            else:
                print('Remote successfully initialized..')
            if not self.annex_uuid:
                self.annex_uuid = self._get_annex_uuid()
        except Exception as ex:
            print('The following exceptions was raised during remote initialization: ' + str(ex))
            sys.exit()

    def retrieve_files(self, path, remote_path):
        try:
            # list content
            for elem in os.listdir(path):
                update_path = os.path.join(path, elem)
                update_remote_path = os.path.join(remote_path, elem)
                if os.path.isdir(update_path):
                    # recurse
                    self.retrieve_files(update_path, update_remote_path)
                else:
                    if os.path.islink(update_path):
                        key = str(os.readlink(update_path)).split('/')[-1]
                        # print(key, update_remote_path)
                        # add to dictionary
                        # self.dictionary[key] = update_remote_path
                        self.process(key, update_remote_path)
                    else:
                        pass
        except Exception as ex:
            print('The following exception was raised while retrieving files: ' + ex)
            sys.exit()

    def process(self, key, path):
        # add count of errors
        try:
            setpresent_e = self._set_present_key(key)
            if setpresent_e is not None:
                print('An error occurred during setpresent key' + str(setpresent_e) + ' with path: ' + path)
        except Exception as ex:
            print('The following exceptions was raised during setpresent key: ' + str(ex) + ' with path: ' + path)
            sys.exit()
        try:
            register_e = self._register_url(key, path)
            if register_e is not None:
                print('An error occurred during url registration' + str(register_e) + ' with path: ' + path)
        except Exception as ex:
            print('The following exceptions was raised during url registration: ' + str(ex) + ' with path: ' + path)
            sys.exit()

    def _get_annex_uuid(self):
        config = configparser.ConfigParser()
        config.read(self.dataset_path + "/.git/config")
        try:
            return config['remote "globus"']['annex-uuid']
        except Exception as ex:
            print(ex)
            sys.exit()

    @staticmethod
    def _set_up():
        setup_command = ['git-annex-remote-globus', 'setup']
        process = subprocess.Popen(setup_command, stdout=subprocess.PIPE)
        _, error = process.communicate()
        return error

    def _init_remote(self):
        if not self.remote:
            encryption = 'encryption=%s' % self.encryption
            endpoint = 'endpoint=%s' % self.dataset_name
            fileprefix = 'fileprefix=%s' % self.remote_prefix
            initremote_command = \
                ['git', 'annex', 'initremote', 'globus',  'type=external', 'externaltype=globus',
                encryption, endpoint, fileprefix]
            process = subprocess.Popen(initremote_command, stdout=subprocess.PIPE)
            _, error = process.communicate()
            return error
        else:
            enableremote_command = ['git', 'annex', 'enableremote', 'globus']
            process = subprocess.Popen(enableremote_command, stdout=subprocess.PIPE)
            _, error = process.communicate()
            return error

    def _set_present_key(self, key):
        # set present key
        setpresentkey_command = ['git', 'annex', 'setpresentkey', key, self.annex_uuid, '1']
        process = subprocess.Popen(setpresentkey_command, stdout=subprocess.PIPE)
        _, error = process.communicate()
        return error

    def _register_url(self, key, path):
        # register url
        registerurl_command = ['git', 'annex', 'registerurl', key, path]
        process = subprocess.Popen(registerurl_command, stdout=subprocess.PIPE)
        _, error = process.communicate()
        return error


def main():
    # Manage argument parsing
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', type=str, help='Local dataset path')
    parser.add_argument('--endpoint', type=str, help='Remote dataset endpoint name')
    parser.add_argument('--fileprefix', type=str, help='Remote dataset files prefix')
    parser.add_argument('--encryption', type=str, default='none', help='Encryption mode')
    args = parser.parse_args()
    # Start retrieving
    master = Retrieve(args.path, args.endpoint, args.fileprefix, args.encryption)
    master.initialize()
    master.retrieve_files(args.path, master.get_remote_path())
    # TODO:count retrieved files below
    print("Files successfully retrieved")



if __name__ == "__main__":
    main()

# run:
# retrieve --path /home/giuly/test/FRDR-multimodal --endpoint frdr_prod_2 --fileprefix /5/published/publication_170/submitted_data --encryption none